{"version":3,"sources":["GameLogic/useGame.js","App.js","serviceWorker.js","index.js"],"names":["useGame","useState","userText","setUserText","timeRemaining","setTimeRemaining","start","setStart","wordCount","setWordCount","textBoxRef","useRef","useEffect","setTimeout","time","console","log","trim","split","filter","word","length","startClock","current","disabled","focus","updateUserText","event","target","value","App","className","ref","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMAiDeA,MA/Cf,WACI,IADc,EAEoBC,mBAAS,IAF7B,mBAENC,EAFM,KAEIC,EAFJ,OAG8BF,mBAFnB,IADX,mBAGNG,EAHM,KAGSC,EAHT,OAIcJ,oBAAS,GAJvB,mBAINK,EAJM,KAICC,EAJD,OAKsBN,mBAAS,GAL/B,mBAKNO,EALM,KAKKC,EALL,KAMRC,EAAaC,iBAAO,MAsC1B,OAbAC,qBAAU,WACLR,EAAgB,GAAKE,EACtBO,YAAW,WACTR,GAAiB,SAAAS,GAAI,OAAIA,EAAO,KAChCC,QAAQC,IAAI,mBACZ,KACuB,IAAlBZ,IATTG,GAAS,GACTE,EAAgCP,EAjBPe,OAAOC,MAAM,KAAKC,QAAO,SAAAC,GAAI,MAAW,KAAPA,KAC7BC,QA0B3BN,QAAQC,IAAI,sBAGd,CAACZ,EAAeE,IAEV,CAACI,aAAWJ,QAAMgB,WAxBP,WAHjBf,GAAS,GACTQ,QAAQC,IAAI,kBAIZX,EArBuB,IAsBvBF,EAAY,IACZO,EAAWa,QAAQC,UAAS,EAC5Bd,EAAWa,QAAQE,SAmBgBC,eApCd,SAAAC,GACrBxB,EAAYwB,EAAMC,OAAOC,QAmCyB3B,WAASE,gBAAcI,cCxBhEsB,MAnBf,WAAe,IAAD,EAC0E9B,IAA/EU,EADK,EACLA,WAAWJ,EADN,EACMA,MAAMgB,EADZ,EACYA,WAAWI,EADvB,EACuBA,eAAexB,EADtC,EACsCA,SAASE,EAD/C,EAC+CA,cAAcI,EAD7D,EAC6DA,UAEzE,OACI,yBAAKuB,UAAU,OACX,oDACA,8BACEC,IAAKtB,EACLc,UAAWlB,EACX2B,SAAWP,EACXG,MAAO3B,IAET,+CAAqBE,GACrB,4BAAQoB,SAAUlB,EAAO4B,QAAS,kBAAIZ,MAAtC,SACA,2CAAiBd,KCLP2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.d4fc72ee.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\r\n\r\nfunction useGame(){\r\n    const initialTimeValue = 60\r\n    const [ userText, setUserText ] = useState(\"\")\r\n    const [ timeRemaining, setTimeRemaining ] = useState(initialTimeValue)\r\n    const [ start, setStart ] = useState(false)\r\n    const [ wordCount, setWordCount ] = useState(0)\r\n    const textBoxRef = useRef(null)\r\n  \r\n    const updateUserText = event =>{\r\n      setUserText(event.target.value)\r\n    }\r\n    const calculateWordCount = (words) =>{\r\n      const wordsArray = words.trim().split(\" \").filter(word => word!=='')\r\n      const wordCount = wordsArray.length\r\n      return wordCount\r\n    }\r\n    const startTimer = () =>{\r\n      setStart(true)\r\n      console.log(\"button clicked\")\r\n    }\r\n    const startClock = ()=>{\r\n      startTimer()\r\n      setTimeRemaining(initialTimeValue)\r\n      setUserText(\"\")\r\n      textBoxRef.current.disabled=false\r\n      textBoxRef.current.focus()\r\n    }\r\n    const endClock = () =>{\r\n      setStart(false)\r\n      setWordCount(calculateWordCount(userText))\r\n    }\r\n    useEffect(()=>{\r\n      if(timeRemaining > 0 && start){\r\n        setTimeout(()=>{\r\n          setTimeRemaining(time => time - 1)\r\n          console.log(\"Still running\")\r\n        },1000)\r\n      }else if(timeRemaining === 0){\r\n        endClock()\r\n        console.log(\"Stopped running\")\r\n      }\r\n      \r\n    },[timeRemaining, start])\r\n\r\n    return ({textBoxRef,start,startClock,updateUserText,userText,timeRemaining,wordCount})\r\n}\r\n\r\nexport default useGame","import React from \"react\"\nimport useGame from \"./GameLogic/useGame\"\n\nfunction App(){\n  const {textBoxRef,start,startClock,updateUserText,userText,timeRemaining,wordCount} = useGame()\n\n  return(\n      <div className=\"App\">\n          <h1>How fast do you type</h1>\n          <textarea \n            ref={textBoxRef}\n            disabled={!start}\n            onChange={ updateUserText }\n            value={userText}\n          />\n          <h4>Time remaining: {timeRemaining}</h4>\n          <button disabled={start} onClick={()=>startClock()}>Start</button>\n          <h1>Word Count: {wordCount}</h1>\n      </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}